springdoc:
  swagger-ui:
    path: /docs
server:
  port: 9002
spring:
  application:
    name: booking-service
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/airlinedb_booking
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    url: jdbc:postgresql://localhost:5432/airlinedb_booking
    user: ${spring.r2dbc.username:user}
    password: ${spring.r2dbc.password:password}
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:kafka-airlines:9092}
    producer:
      client-id: ${spring.application.name}
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      transaction-id-prefix: ${spring.application.name}



logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    org.apache.kafka.clients.producer.KafkaProducer: DEBUG
    reactor.kafka.sender.internals: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, flyway, health, heapdump, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

ticket:
  catalog-flight-uri: "http://localhost:9001"
message:
  topic: booking-accepted